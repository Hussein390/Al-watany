// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Dilvered {
  id            String      @id @default(uuid())
  clientName    String
  price         Int         @default(35000)
  phone         String
  address       String
  deliveryCost  Int?        @default(0)
  image         String?
  isReceived    Boolean     @default(false)
  isOnline      Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  environment   Environment @relation(fields: [environmentId], references: [id])
  environmentId String
  user          User        @relation(fields: [userId], references: [id])
  userId        String
}

/// Environment
model Environment {
  id            String         @id @default(uuid()) @map("_id")
  name          String         @unique
  password      String
  ownerId       String
  owner         User           @relation("OwnerEnvironments", fields: [ownerId], references: [id])
  collaborators Collaborator[]
  dilvered      Dilvered[]
}

model Collaborator {
  id            String      @id @default(uuid()) @map("_id")
  userId        String
  environmentId String
  user          User        @relation(fields: [userId], references: [id])
  environment   Environment @relation(fields: [environmentId], references: [id])
  role          Role

  // Optional delivery profile, only relevant if role == DILVERY
  deliveryProfile DeliveryProfile?
}

model DeliveryProfile {
  id             String       @id @default(uuid())
  collaboratorId String       @unique
  deliveryCost   Int?         @default(0)
  address        String       @default("بلديات")
  delivered      Int?         @default(0)
  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id])
}

enum Role {
  DELIVERY
  VIEWER
  ADMIN
}

// USER MODLE
model User {
  id                String          @id @default(uuid())
  name              String?
  email             String          @unique
  emailVerified     DateTime?
  image             String?
  accounts          Account[]
  sessions          Session[]
  // Optional for WebAuthn support
  Authenticator     Authenticator[]
  deliveries        Dilvered[]
  createdAt         DateTime        @default(now())
  Collaborator      Collaborator[]
  OwnerEnvironments Environment[]   @relation("OwnerEnvironments")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
